{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_initialRate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "EthToToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "ExchangeRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "TokenToEth",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeToken",
      "outputs": [
        {
          "internalType": "contract ExchangeToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "exchangeTokenToEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newRate",
          "type": "uint256"
        }
      ],
      "name": "setExchangeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0aa990a9b72a78d4d5005c3b8050a1cb3b29a88ae9cf78a0f8292440575d67c8",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2175413",
    "logsBloom": "0x
    "blockHash": "0xaa6f62c56820194c01095e47f0a5ebb4ea50aac8f1762fdbd5515a9d46e02718",
    "transactionHash": "0x0aa990a9b72a78d4d5005c3b8050a1cb3b29a88ae9cf78a0f8292440575d67c8",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2175413",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000000000000000000000",
    "Testing Token",
    "lz404"
  ],
  "numDeployments": 1,
  "solcInputHash": "16f29c5427d7214fcfd268311f9d50f2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"EthToToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"ExchangeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"TokenToEth\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeToken\",\"outputs\":[{\"internalType\":\"contract ExchangeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeTokenToEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRate\",\"type\":\"uint256\"}],\"name\":\"setExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ETHExchange.sol\":\"ETHExchange\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\\npragma solidity >=0.8.4;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * Both values are immutable: they can only be set once during construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"contracts/ETHExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\nimport \\\"./ExchangeToken.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\ncontract ETHExchange is ReentrancyGuard {\\r\\n ExchangeToken public exchangeToken;\\r\\n uint256 public exchangeRate;\\r\\n address public owner;\\r\\n\\r\\n modifier onlyOwner(){\\r\\n    require(msg.sender == owner, \\\"Only owner can call this function\\\");\\r\\n    _;\\r\\n }\\r\\n\\r\\n event EthToToken(address indexed sender, uint256 ethAmount, uint256 tokenAmount);\\r\\n event TokenToEth(address indexed sender, uint256 tokenAmount, uint256 ethAmount);\\r\\n\\r\\n event ExchangeRateUpdated(uint256 oldRate, uint256 newRate);\\r\\n\\r\\n constructor(uint256 _initialRate, string memory tokenName, string memory tokenSymbol) {\\r\\n    owner = msg.sender;\\r\\n    exchangeRate = _initialRate;\\r\\n    exchangeToken = new ExchangeToken(tokenName, tokenSymbol, address(this));\\r\\n }\\r\\n\\r\\n receive() external payable nonReentrant {\\r\\n    require(msg.value > 0, \\\"Must send ETH to get tokens\\\");\\r\\n    uint256 tokenAmount = msg.value * exchangeRate;\\r\\n    exchangeToken.mint(msg.sender, tokenAmount);\\r\\n    emit EthToToken(msg.sender, msg.value, tokenAmount);\\r\\n }\\r\\n\\r\\n function exchangeTokenToEth(uint256 tokenAmount) external nonReentrant{\\r\\n    require(tokenAmount > 0, \\\"Must send tokens to get ETH\\\");\\r\\n    uint256 ethAmount = tokenAmount / exchangeRate;\\r\\n    require(address(this).balance >= ethAmount, \\\"Contract does not have enough ETH\\\");\\r\\n\\r\\n    exchangeToken.burn(msg.sender, tokenAmount);\\r\\n    (bool success,) = payable(msg.sender).call{value: ethAmount}(\\\"\\\");\\r\\n    require(success, \\\"ETH transfer failed\\\");\\r\\n    emit TokenToEth(msg.sender, tokenAmount, ethAmount);\\r\\n }\\r\\n\\r\\n function setExchangeRate(uint256 _newRate) external onlyOwner {\\r\\n    require(_newRate > 0, \\\"Exchange rate must be greater than 0\\\");\\r\\n    uint256 oldRate = exchangeRate;\\r\\n    exchangeRate = _newRate;\\r\\n    emit ExchangeRateUpdated(oldRate, _newRate);\\r\\n }\\r\\n\\r\\n function emergencyWithdraw(uint256 amount) external onlyOwner nonReentrant {\\r\\n    require(amount >0, \\\"Amount must be greater than 0\\\");\\r\\n    require(address(this).balance >= amount, \\\"Not enough ETH in contract\\\");\\r\\n    (bool success,) = payable(owner).call{value: amount}(\\\"\\\");\\r\\n    require(success, \\\"ETH transfer failed\\\");\\r\\n }\\r\\n\\r\\n}\",\"keccak256\":\"0x47af2fab5e4d0d0116ca530508eaa10a5b879c2be5984600dcad06a1d8cdc6f4\",\"license\":\"MIT\"},\"contracts/ExchangeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.17;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\n\\r\\ncontract ExchangeToken is ERC20 {\\r\\n    address public exchangeContract;\\r\\n    modifier onlyExchangeContract() {\\r\\n        require(msg.sender == exchangeContract, \\\"Only exchange contract can call this function\\\");\\r\\n        _;\\r\\n    }   \\r\\n\\r\\n    constructor(string memory name, string memory symbol, address _exchangeContract) ERC20(name, symbol) {\\r\\n        exchangeContract = _exchangeContract;        \\r\\n    }\\r\\n\\r\\n    function mint(address to, uint256 amount) external onlyExchangeContract {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n\\r\\n    function burn(address from, uint256 amount) external onlyExchangeContract {\\r\\n        _burn(from, amount);\\r\\n    }\\r\\n\\r\\n    function setExchangeContract(address _exchangeContract) external onlyExchangeContract {\\r\\n        exchangeContract = _exchangeContract;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x18cc076b6840ff4f19773b7645160bd0d924bafd70bf11f74d3680af607d8629\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002d4d38038062002d4d8339818101604052810190620000379190620002e9565b600160008190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260028190555081813060405162000098906200010d565b620000a69392919062000425565b604051809103906000f080158015620000c3573d6000803e3d6000fd5b50600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000470565b61194d806200140083390190565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b62000144816200012f565b81146200015057600080fd5b50565b600081519050620001648162000139565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001bf8262000174565b810181811067ffffffffffffffff82111715620001e157620001e062000185565b5b80604052505050565b6000620001f66200011b565b9050620002048282620001b4565b919050565b600067ffffffffffffffff82111562000227576200022662000185565b5b620002328262000174565b9050602081019050919050565b60005b838110156200025f57808201518184015260208101905062000242565b60008484015250505050565b6000620002826200027c8462000209565b620001ea565b905082815260208101848484011115620002a157620002a06200016f565b5b620002ae8482856200023f565b509392505050565b600082601f830112620002ce57620002cd6200016a565b5b8151620002e08482602086016200026b565b91505092915050565b60008060006060848603121562000305576200030462000125565b5b6000620003158682870162000153565b935050602084015167ffffffffffffffff8111156200033957620003386200012a565b5b6200034786828701620002b6565b925050604084015167ffffffffffffffff8111156200036b576200036a6200012a565b5b6200037986828701620002b6565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000620003ac8262000383565b620003b881856200038e565b9350620003ca8185602086016200023f565b620003d58162000174565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200040d82620003e0565b9050919050565b6200041f8162000400565b82525050565b600060608201905081810360008301526200044181866200039f565b905081810360208301526200045781856200039f565b905062000468604083018462000414565b949350505050565b610f8080620004806000396000f3fe6080604052600436106100595760003560e01c80633ba0b9a9146101aa5780635312ea8e146101d55780638da5cb5b146101fe578063a145293a14610229578063a25eb5d914610252578063db068e0e1461027d576101a5565b366101a5576100666102a6565b600034116100a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100a0906108f3565b60405180910390fd5b6000600254346100b9919061094c565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016101189291906109de565b600060405180830381600087803b15801561013257600080fd5b505af1158015610146573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f35d3eb65647c7be6f717fb86b1977edc1cc5f8fb53079efc975be6c1d9b1be533483604051610192929190610a07565b60405180910390a2506101a36102ec565b005b600080fd5b3480156101b657600080fd5b506101bf6102f6565b6040516101cc9190610a30565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f79190610a7c565b6102fc565b005b34801561020a57600080fd5b506102136104f4565b6040516102209190610aa9565b60405180910390f35b34801561023557600080fd5b50610250600480360381019061024b9190610a7c565b61051a565b005b34801561025e57600080fd5b50610267610752565b6040516102749190610b23565b60405180910390f35b34801561028957600080fd5b506102a4600480360381019061029f9190610a7c565b610778565b005b6002600054036102e2576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b6001600081905550565b60025481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038390610bb0565b60405180910390fd5b6103946102a6565b600081116103d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ce90610c1c565b60405180910390fd5b8047101561041a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041190610c88565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405161046290610cd9565b60006040518083038185875af1925050503d806000811461049f576040519150601f19603f3d011682016040523d82523d6000602084013e6104a4565b606091505b50509050806104e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104df90610d3a565b60405180910390fd5b506104f16102ec565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105226102a6565b60008111610565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055c90610da6565b60405180910390fd5b6000600254826105759190610df5565b9050804710156105ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b190610e98565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b81526004016106179291906109de565b600060405180830381600087803b15801561063157600080fd5b505af1158015610645573d6000803e3d6000fd5b5050505060003373ffffffffffffffffffffffffffffffffffffffff168260405161066f90610cd9565b60006040518083038185875af1925050503d80600081146106ac576040519150601f19603f3d011682016040523d82523d6000602084013e6106b1565b606091505b50509050806106f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ec90610d3a565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f22881cb05b9b44f022efe88ac13a4b776a8b5fa62415f549022b78213b28e544848460405161073d929190610a07565b60405180910390a2505061074f6102ec565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ff90610bb0565b60405180910390fd5b6000811161084b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084290610f2a565b60405180910390fd5b60006002549050816002819055507fc8d1043f24843c0a1c9251fdc30017d84e87498fbcf232af9f86816b5e182bde818360405161088a929190610a07565b60405180910390a15050565b600082825260208201905092915050565b7f4d7573742073656e642045544820746f2067657420746f6b656e730000000000600082015250565b60006108dd601b83610896565b91506108e8826108a7565b602082019050919050565b6000602082019050818103600083015261090c816108d0565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061095782610913565b915061096283610913565b925082820261097081610913565b915082820484148315176109875761098661091d565b5b5092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109b98261098e565b9050919050565b6109c9816109ae565b82525050565b6109d881610913565b82525050565b60006040820190506109f360008301856109c0565b610a0060208301846109cf565b9392505050565b6000604082019050610a1c60008301856109cf565b610a2960208301846109cf565b9392505050565b6000602082019050610a4560008301846109cf565b92915050565b600080fd5b610a5981610913565b8114610a6457600080fd5b50565b600081359050610a7681610a50565b92915050565b600060208284031215610a9257610a91610a4b565b5b6000610aa084828501610a67565b91505092915050565b6000602082019050610abe60008301846109c0565b92915050565b6000819050919050565b6000610ae9610ae4610adf8461098e565b610ac4565b61098e565b9050919050565b6000610afb82610ace565b9050919050565b6000610b0d82610af0565b9050919050565b610b1d81610b02565b82525050565b6000602082019050610b386000830184610b14565b92915050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000610b9a602183610896565b9150610ba582610b3e565b604082019050919050565b60006020820190508181036000830152610bc981610b8d565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b6000610c06601d83610896565b9150610c1182610bd0565b602082019050919050565b60006020820190508181036000830152610c3581610bf9565b9050919050565b7f4e6f7420656e6f7567682045544820696e20636f6e7472616374000000000000600082015250565b6000610c72601a83610896565b9150610c7d82610c3c565b602082019050919050565b60006020820190508181036000830152610ca181610c65565b9050919050565b600081905092915050565b50565b6000610cc3600083610ca8565b9150610cce82610cb3565b600082019050919050565b6000610ce482610cb6565b9150819050919050565b7f455448207472616e73666572206661696c656400000000000000000000000000600082015250565b6000610d24601383610896565b9150610d2f82610cee565b602082019050919050565b60006020820190508181036000830152610d5381610d17565b9050919050565b7f4d7573742073656e6420746f6b656e7320746f20676574204554480000000000600082015250565b6000610d90601b83610896565b9150610d9b82610d5a565b602082019050919050565b60006020820190508181036000830152610dbf81610d83565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e0082610913565b9150610e0b83610913565b925082610e1b57610e1a610dc6565b5b828204905092915050565b7f436f6e747261637420646f6573206e6f74206861766520656e6f75676820455460008201527f4800000000000000000000000000000000000000000000000000000000000000602082015250565b6000610e82602183610896565b9150610e8d82610e26565b604082019050919050565b60006020820190508181036000830152610eb181610e75565b9050919050565b7f45786368616e67652072617465206d757374206265206772656174657220746860008201527f616e203000000000000000000000000000000000000000000000000000000000602082015250565b6000610f14602483610896565b9150610f1f82610eb8565b604082019050919050565b60006020820190508181036000830152610f4381610f07565b905091905056fea2646970667358221220d4010fd32897426ad3c1e656f68c5431ffa4db191a5aa56bd069040550d87b6164736f6c6343000814003360806040523480156200001157600080fd5b506040516200194d3803806200194d8339818101604052810190620000379190620002a1565b828281600390816200004a919062000586565b5080600490816200005c919062000586565b50505080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506200066d565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200011282620000c7565b810181811067ffffffffffffffff82111715620001345762000133620000d8565b5b80604052505050565b600062000149620000a9565b905062000157828262000107565b919050565b600067ffffffffffffffff8211156200017a5762000179620000d8565b5b6200018582620000c7565b9050602081019050919050565b60005b83811015620001b257808201518184015260208101905062000195565b60008484015250505050565b6000620001d5620001cf846200015c565b6200013d565b905082815260208101848484011115620001f457620001f3620000c2565b5b6200020184828562000192565b509392505050565b600082601f830112620002215762000220620000bd565b5b815162000233848260208601620001be565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000269826200023c565b9050919050565b6200027b816200025c565b81146200028757600080fd5b50565b6000815190506200029b8162000270565b92915050565b600080600060608486031215620002bd57620002bc620000b3565b5b600084015167ffffffffffffffff811115620002de57620002dd620000b8565b5b620002ec8682870162000209565b935050602084015167ffffffffffffffff81111562000310576200030f620000b8565b5b6200031e8682870162000209565b925050604062000331868287016200028a565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200038e57607f821691505b602082108103620003a457620003a362000346565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200040e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003cf565b6200041a8683620003cf565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000467620004616200045b8462000432565b6200043c565b62000432565b9050919050565b6000819050919050565b620004838362000446565b6200049b62000492826200046e565b848454620003dc565b825550505050565b600090565b620004b2620004a3565b620004bf81848462000478565b505050565b5b81811015620004e757620004db600082620004a8565b600181019050620004c5565b5050565b601f82111562000536576200050081620003aa565b6200050b84620003bf565b810160208510156200051b578190505b620005336200052a85620003bf565b830182620004c4565b50505b505050565b600082821c905092915050565b60006200055b600019846008026200053b565b1980831691505092915050565b600062000576838362000548565b9150826002028217905092915050565b62000591826200033b565b67ffffffffffffffff811115620005ad57620005ac620000d8565b5b620005b9825462000375565b620005c6828285620004eb565b600060209050601f831160018114620005fe5760008415620005e9578287015190505b620005f5858262000568565b86555062000665565b601f1984166200060e86620003aa565b60005b82811015620006385784890151825560018201915060208501945060208101905062000611565b8683101562000658578489015162000654601f89168262000548565b8355505b6001600288020188555050505b505050505050565b6112d0806200067d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610216578063a9059cbb14610232578063dd62ed3e14610262578063e5c42a3b14610292576100cf565b806340c10f19146101ac57806370a08231146101c857806395d89b41146101f8576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce567146101705780633f0a07971461018e575b600080fd5b6100dc6102ae565b6040516100e99190610e92565b60405180910390f35b61010c60048036038101906101079190610f4d565b610340565b6040516101199190610fa8565b60405180910390f35b61012a610363565b6040516101379190610fd2565b60405180910390f35b61015a60048036038101906101559190610fed565b61036d565b6040516101679190610fa8565b60405180910390f35b61017861039c565b604051610185919061105c565b60405180910390f35b6101966103a5565b6040516101a39190611086565b60405180910390f35b6101c660048036038101906101c19190610f4d565b6103cb565b005b6101e260048036038101906101dd91906110a1565b610469565b6040516101ef9190610fd2565b60405180910390f35b6102006104b1565b60405161020d9190610e92565b60405180910390f35b610230600480360381019061022b9190610f4d565b610543565b005b61024c60048036038101906102479190610f4d565b6105e1565b6040516102599190610fa8565b60405180910390f35b61027c600480360381019061027791906110ce565b610604565b6040516102899190610fd2565b60405180910390f35b6102ac60048036038101906102a791906110a1565b61068b565b005b6060600380546102bd9061113d565b80601f01602080910402602001604051908101604052809291908181526020018280546102e99061113d565b80156103365780601f1061030b57610100808354040283529160200191610336565b820191906000526020600020905b81548152906001019060200180831161031957829003601f168201915b5050505050905090565b60008061034b61075f565b9050610358818585610767565b600191505092915050565b6000600254905090565b60008061037861075f565b9050610385858285610779565b61039085858561080e565b60019150509392505050565b60006012905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610452906111e0565b60405180910390fd5b6104658282610902565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546104c09061113d565b80601f01602080910402602001604051908101604052809291908181526020018280546104ec9061113d565b80156105395780601f1061050e57610100808354040283529160200191610539565b820191906000526020600020905b81548152906001019060200180831161051c57829003601f168201915b5050505050905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ca906111e0565b60405180910390fd5b6105dd8282610984565b5050565b6000806105ec61075f565b90506105f981858561080e565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461071b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610712906111e0565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6107748383836001610a06565b505050565b60006107858484610604565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81101561080857818110156107f8578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016107ef93929190611200565b60405180910390fd5b61080784848484036000610a06565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108805760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016108779190611086565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108f25760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016108e99190611086565b60405180910390fd5b6108fd838383610bdd565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109745760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161096b9190611086565b60405180910390fd5b61098060008383610bdd565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109f65760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016109ed9190611086565b60405180910390fd5b610a0282600083610bdd565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610a785760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401610a6f9190611086565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610aea5760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401610ae19190611086565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610bd7578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610bce9190610fd2565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c2f578060026000828254610c239190611266565b92505081905550610d02565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610cbb578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610cb293929190611200565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d4b5780600260008282540392505081905550610d98565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610df59190610fd2565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e3c578082015181840152602081019050610e21565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e6482610e02565b610e6e8185610e0d565b9350610e7e818560208601610e1e565b610e8781610e48565b840191505092915050565b60006020820190508181036000830152610eac8184610e59565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ee482610eb9565b9050919050565b610ef481610ed9565b8114610eff57600080fd5b50565b600081359050610f1181610eeb565b92915050565b6000819050919050565b610f2a81610f17565b8114610f3557600080fd5b50565b600081359050610f4781610f21565b92915050565b60008060408385031215610f6457610f63610eb4565b5b6000610f7285828601610f02565b9250506020610f8385828601610f38565b9150509250929050565b60008115159050919050565b610fa281610f8d565b82525050565b6000602082019050610fbd6000830184610f99565b92915050565b610fcc81610f17565b82525050565b6000602082019050610fe76000830184610fc3565b92915050565b60008060006060848603121561100657611005610eb4565b5b600061101486828701610f02565b935050602061102586828701610f02565b925050604061103686828701610f38565b9150509250925092565b600060ff82169050919050565b61105681611040565b82525050565b6000602082019050611071600083018461104d565b92915050565b61108081610ed9565b82525050565b600060208201905061109b6000830184611077565b92915050565b6000602082840312156110b7576110b6610eb4565b5b60006110c584828501610f02565b91505092915050565b600080604083850312156110e5576110e4610eb4565b5b60006110f385828601610f02565b925050602061110485828601610f02565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061115557607f821691505b6020821081036111685761116761110e565b5b50919050565b7f4f6e6c792065786368616e676520636f6e74726163742063616e2063616c6c2060008201527f746869732066756e6374696f6e00000000000000000000000000000000000000602082015250565b60006111ca602d83610e0d565b91506111d58261116e565b604082019050919050565b600060208201905081810360008301526111f9816111bd565b9050919050565b60006060820190506112156000830186611077565b6112226020830185610fc3565b61122f6040830184610fc3565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061127182610f17565b915061127c83610f17565b925082820190508082111561129457611293611237565b5b9291505056fea2646970667358221220570b41ad95cfca56109a0ffdb1effcbdc8926191083c6ab54ef49c8c48f1ff9064736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100595760003560e01c80633ba0b9a9146101aa5780635312ea8e146101d55780638da5cb5b146101fe578063a145293a14610229578063a25eb5d914610252578063db068e0e1461027d576101a5565b366101a5576100666102a6565b600034116100a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100a0906108f3565b60405180910390fd5b6000600254346100b9919061094c565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b81526004016101189291906109de565b600060405180830381600087803b15801561013257600080fd5b505af1158015610146573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f35d3eb65647c7be6f717fb86b1977edc1cc5f8fb53079efc975be6c1d9b1be533483604051610192929190610a07565b60405180910390a2506101a36102ec565b005b600080fd5b3480156101b657600080fd5b506101bf6102f6565b6040516101cc9190610a30565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f79190610a7c565b6102fc565b005b34801561020a57600080fd5b506102136104f4565b6040516102209190610aa9565b60405180910390f35b34801561023557600080fd5b50610250600480360381019061024b9190610a7c565b61051a565b005b34801561025e57600080fd5b50610267610752565b6040516102749190610b23565b60405180910390f35b34801561028957600080fd5b506102a4600480360381019061029f9190610a7c565b610778565b005b6002600054036102e2576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b6001600081905550565b60025481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038390610bb0565b60405180910390fd5b6103946102a6565b600081116103d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ce90610c1c565b60405180910390fd5b8047101561041a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041190610c88565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405161046290610cd9565b60006040518083038185875af1925050503d806000811461049f576040519150601f19603f3d011682016040523d82523d6000602084013e6104a4565b606091505b50509050806104e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104df90610d3a565b60405180910390fd5b506104f16102ec565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105226102a6565b60008111610565576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055c90610da6565b60405180910390fd5b6000600254826105759190610df5565b9050804710156105ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b190610e98565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b81526004016106179291906109de565b600060405180830381600087803b15801561063157600080fd5b505af1158015610645573d6000803e3d6000fd5b5050505060003373ffffffffffffffffffffffffffffffffffffffff168260405161066f90610cd9565b60006040518083038185875af1925050503d80600081146106ac576040519150601f19603f3d011682016040523d82523d6000602084013e6106b1565b606091505b50509050806106f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ec90610d3a565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f22881cb05b9b44f022efe88ac13a4b776a8b5fa62415f549022b78213b28e544848460405161073d929190610a07565b60405180910390a2505061074f6102ec565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ff90610bb0565b60405180910390fd5b6000811161084b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084290610f2a565b60405180910390fd5b60006002549050816002819055507fc8d1043f24843c0a1c9251fdc30017d84e87498fbcf232af9f86816b5e182bde818360405161088a929190610a07565b60405180910390a15050565b600082825260208201905092915050565b7f4d7573742073656e642045544820746f2067657420746f6b656e730000000000600082015250565b60006108dd601b83610896565b91506108e8826108a7565b602082019050919050565b6000602082019050818103600083015261090c816108d0565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061095782610913565b915061096283610913565b925082820261097081610913565b915082820484148315176109875761098661091d565b5b5092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109b98261098e565b9050919050565b6109c9816109ae565b82525050565b6109d881610913565b82525050565b60006040820190506109f360008301856109c0565b610a0060208301846109cf565b9392505050565b6000604082019050610a1c60008301856109cf565b610a2960208301846109cf565b9392505050565b6000602082019050610a4560008301846109cf565b92915050565b600080fd5b610a5981610913565b8114610a6457600080fd5b50565b600081359050610a7681610a50565b92915050565b600060208284031215610a9257610a91610a4b565b5b6000610aa084828501610a67565b91505092915050565b6000602082019050610abe60008301846109c0565b92915050565b6000819050919050565b6000610ae9610ae4610adf8461098e565b610ac4565b61098e565b9050919050565b6000610afb82610ace565b9050919050565b6000610b0d82610af0565b9050919050565b610b1d81610b02565b82525050565b6000602082019050610b386000830184610b14565b92915050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000610b9a602183610896565b9150610ba582610b3e565b604082019050919050565b60006020820190508181036000830152610bc981610b8d565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b6000610c06601d83610896565b9150610c1182610bd0565b602082019050919050565b60006020820190508181036000830152610c3581610bf9565b9050919050565b7f4e6f7420656e6f7567682045544820696e20636f6e7472616374000000000000600082015250565b6000610c72601a83610896565b9150610c7d82610c3c565b602082019050919050565b60006020820190508181036000830152610ca181610c65565b9050919050565b600081905092915050565b50565b6000610cc3600083610ca8565b9150610cce82610cb3565b600082019050919050565b6000610ce482610cb6565b9150819050919050565b7f455448207472616e73666572206661696c656400000000000000000000000000600082015250565b6000610d24601383610896565b9150610d2f82610cee565b602082019050919050565b60006020820190508181036000830152610d5381610d17565b9050919050565b7f4d7573742073656e6420746f6b656e7320746f20676574204554480000000000600082015250565b6000610d90601b83610896565b9150610d9b82610d5a565b602082019050919050565b60006020820190508181036000830152610dbf81610d83565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e0082610913565b9150610e0b83610913565b925082610e1b57610e1a610dc6565b5b828204905092915050565b7f436f6e747261637420646f6573206e6f74206861766520656e6f75676820455460008201527f4800000000000000000000000000000000000000000000000000000000000000602082015250565b6000610e82602183610896565b9150610e8d82610e26565b604082019050919050565b60006020820190508181036000830152610eb181610e75565b9050919050565b7f45786368616e67652072617465206d757374206265206772656174657220746860008201527f616e203000000000000000000000000000000000000000000000000000000000602082015250565b6000610f14602483610896565b9150610f1f82610eb8565b604082019050919050565b60006020820190508181036000830152610f4381610f07565b905091905056fea2646970667358221220d4010fd32897426ad3c1e656f68c5431ffa4db191a5aa56bd069040550d87b6164736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 796,
        "contract": "contracts/ETHExchange.sol:ETHExchange",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 863,
        "contract": "contracts/ETHExchange.sol:ETHExchange",
        "label": "exchangeToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ExchangeToken)1189"
      },
      {
        "astId": 865,
        "contract": "contracts/ETHExchange.sol:ETHExchange",
        "label": "exchangeRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 867,
        "contract": "contracts/ETHExchange.sol:ETHExchange",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ExchangeToken)1189": {
        "encoding": "inplace",
        "label": "contract ExchangeToken",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}